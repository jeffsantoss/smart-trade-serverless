service: smart-trade

custom:
  secrets: ${ssm:/aws/reference/secretsmanager/${opt:stage, "dev"}/smart-trade~true}      
  smartTradeSetupTable: ${opt:stage, "dev"}-smart-trade-setup
  eventBus: arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/smart-tarde-events  

provider:
  # eventBridge:
  #   useCloudFormation: true
  environment:
    NODE_ENV: ${sls:stage}
    SMART_TRADE_SETUP_TABLE: ${self:custom.smartTradeSetupTable}
    BINANCE_URL: https://api3.binance.com/api/v3/
    SMART_TRADE_EVENT_BUS: ${self:custom.eventBus}
    VALUE_TO_OPERATE: 50
    BINANCE_API_SECRET: ${self:custom.secrets.binanceApiSecret}
    BINANCE_API_KEY: ${self:custom.secrets.binanceApiKey}  
  name: aws
  runtime: nodejs12.x  
  memorySize: 256
  tracing:
    apiGateway: true
    lambda: true  
  resourcePolicy:
    - Effect: Allow
      Principal: "*"
      Action: execute-api:Invoke
      Resource:
        - !Sub arn:aws:execute-api:us-east-1:${AWS::AccountId}:*/dev/*

plugins:
  - serverless-plugin-typescript 
  # - serverless-plugin-lambda-dead-letter
  - serverless-offline
  - serverless-iam-roles-per-function

functions:
  trend:
    handler: app/handler.setupCreator
    name: ${sls:stage}-smart-trade-setup
    description: Create a Setup
    events:
      - eventBridge:
          eventBus: ${self:custom.eventBus}
          pattern:
            source:
              - setup.analyze
            detail-type:
              - operationFinished
    iamRoleStatements: 
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
        Resource:  !GetAtt assetTrend.Arn
  setupAnalyzer:
    handler: app/handler.setupAnalyze
    name: ${sls:stage}-smart-trade-setup-analyzer
    description: Analyze a setup
    iamRoleStatements: 
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
          - dynamodb:Scan
          - dynamodb:UpdateItem
        Resource:  !GetAtt assetTrend.Arn
  orderCreator:
    handler: app/handler.createOrder
    name: ${sls:stage}-smart-trade-order-creator
    description: Create a Order in the Exchange
    events:
      - eventBridge:
          eventBus: ${self:custom.eventBus}
          pattern:
            source:
              - setup.analyze
            detail-type:
              - operationFinished
  setupGetter:
    handler: app/handler.setupGetter
    name: ${sls:stage}-smart-trade-setup-getter
    description: Get a current Setup
    events:
      - http:
          path: api/smart-trade/setup
          method: get          
          cors: true    
    iamRoleStatements: 
      - Effect: "Allow"
        Action:          
          - dynamodb:Scan          
        Resource:  !GetAtt assetTrend.Arn   
resources:
  Resources:    
    assetTrend:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.smartTradeSetupTable}